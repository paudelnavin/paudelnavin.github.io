===================================================================================================
=============Question 1)============================
Working with prototype

Which values are shown in the process?

let animal = {
  jumps: null
};
let rabbit = {
  __proto__: animal,
  jumps: true
};

alert( rabbit.jumps ); // ? (1)

delete rabbit.jumps;

alert( rabbit.jumps ); // ? (2)

delete animal.jumps;

alert( rabbit.jumps ); // ? (3)

##############Solution:##########################

1. true, taken from rabbit.
2. null, taken from animal.
3. undefined, there’s no such property any more.

========================Question 2)=========================
Searching algorithm

The task has two parts.

    Given the following objects:

    let head = {
      glasses: 1
    };

    let table = {
      pen: 3
    };

    let bed = {
      sheet: 1,
      pillow: 2
    };

    let pockets = {
      money: 2000
    };

1. Use __proto__ to assign prototypes in a way that any property lookup will follow the path:
    pockets → bed → table → head. For instance, pockets.pen should be 3 (found in table), and bed.glasses
    should be 1 (found in head).
2. Answer the question: is it faster to get glasses as pockets.glasses or head.glasses? Benchmark if
    needed.

######################Solution:#######################

1.      let head = {
         glasses: 1
       };

       let table = {
         pen: 3,
         __proto__: head
       };

       let bed = {
         sheet: 1,
         pillow: 2,
         __proto__: table
       };

       let pockets = {
         money: 2000,
         __proto__: bed
       };

       alert( pockets.pen ); // 3
       alert( bed.glasses ); // 1
       alert( table.money ); // undefined

2. In modern engines, performance-wise, there’s no difference whether we take a property from an object
    or its prototype. They remember where the property was found and reuse it in the next request.

   For instance, for pockets.glasses they remember where they found glasses (in head), and next time will
   search right there. They are also smart enough to update internal caches if something changes, so that
   optimization is safe.

=======================Question 3)========================
Where does it write?

We have rabbit inheriting from animal.

If we call rabbit.eat(), which object receives the full property: animal or rabbit?

let animal = {
  eat() {
    this.full = true;
  }
};

let rabbit = {
  __proto__: animal
};

rabbit.eat();

##############################solution:#############################

rabbit.

That’s because "this" is an object before the dot, so "rabbit.eat()" modifies rabbit.
Property lookup and execution are two different things.
The method "rabbit.eat" is first found in the prototype, then executed with this=rabbit.

====================Question 4)========================
Why are both hamsters full?

We have two hamsters: speedy and lazy inheriting from the general hamster object.
When we feed one of them, the other one is also full. Why? How can we fix it?

let hamster = {
  stomach: [],

  eat(food) {
    this.stomach.push(food);
  }
};

let speedy = {
  __proto__: hamster
};

let lazy = {
  __proto__: hamster
};

// This one found the food
speedy.eat("apple");
alert( speedy.stomach ); // apple

// This one also has it, why? fix please.
alert( lazy.stomach ); // apple

#########################solution##############################3

Let’s look carefully at what’s going on in the call speedy.eat("apple").

The method speedy.eat is found in the prototype (=hamster), then executed with this=speedy (the object
before the dot).

Then this.stomach.push() needs to find stomach property and call push on it. It looks for stomach in
this (=speedy), but nothing found.

Then it follows the prototype chain and finds stomach in hamster.

Then it calls push on it, adding the food into the stomach of the prototype.

So all hamsters share a single stomach!

Both for lazy.stomach.push(...) and speedy.stomach.push(), the property stomach is found in the
prototype (as it’s not in the object itself), then the new data is pushed into it.

Please note that such thing doesn’t happen in case of a simple assignment this.stomach=:

let hamster = {
  stomach: [],

  eat(food) {
    // assign to this.stomach instead of this.stomach.push
    this.stomach = [food];
  }
};

let speedy = {
   __proto__: hamster
};

let lazy = {
  __proto__: hamster
};

// Speedy one found the food
speedy.eat("apple");
alert( speedy.stomach ); // apple

// Lazy one's stomach is empty
alert( lazy.stomach ); // <nothing>
Now all works fine, because this.stomach= does not perform a lookup of stomach. The value is written
directly into this object.

Also we can totally avoid the problem by making sure that each hamster has their own stomach:

let hamster = {
  stomach: [],

  eat(food) {
    this.stomach.push(food);
  }
};

let speedy = {
  __proto__: hamster,
  stomach: []
};

let lazy = {
  __proto__: hamster,
  stomach: []
};

// Speedy one found the food
speedy.eat("apple");
alert( speedy.stomach ); // apple

// Lazy one's stomach is empty
alert( lazy.stomach ); // <nothing>
As a common solution, all properties that describe the state of a particular object, like stomach
above, should be written into that object. That prevents such problems.


=================================================================================================
===============Question 1)===================================
Changing "prototype"

In the code below we create new Rabbit, and then try to modify its prototype.

In the start, we have this code:

function Rabbit() {}
Rabbit.prototype = {
  eats: true
};

let rabbit = new Rabbit();

alert( rabbit.eats ); // true

~~~~~~~~~~~~1.~~~~~~~~~~~~~~~~~~~~~~~~~
We added one more string (emphasized). What will alert show now?

function Rabbit() {}
Rabbit.prototype = {
  eats: true
};

let rabbit = new Rabbit();

Rabbit.prototype = {};

alert( rabbit.eats ); // ?

~~~~~~~~~~~~~~~~~solution~~~~~~~~~~~~~~~~~~
true.

The assignment to Rabbit.prototype sets up [[Prototype]] for new objects, but it does not affect the
existing ones.

~~~~~~~~~~~~~~~~~~~~~2.~~~~~~~~~~~~~~~~~~~~~~~~~~~~
…And if the code is like this (replaced one line)?

function Rabbit() {}
Rabbit.prototype = {
  eats: true
};

let rabbit = new Rabbit();

Rabbit.prototype.eats = false;

alert( rabbit.eats ); // ?

~~~~~~~~~~~~~~~~~~solution~~~~~~~~~~~~~~~~~~~~~~~
false.

Objects are assigned by reference. The object from Rabbit.prototype is not duplicated, it’s still a
single object referenced both by Rabbit.prototype and by the [[Prototype]] of rabbit.

So when we change its content through one reference, it is visible through the other one.
~~~~~~~~~~~~~~~~~~3.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
And like this (replaced one line)?

function Rabbit() {}
Rabbit.prototype = {
  eats: true
};

let rabbit = new Rabbit();

delete rabbit.eats;

alert( rabbit.eats ); // ?

~~~~~~~~~~~~~~~~~~~~~~~solution~~~~~~~~~~~~~~~~~~~~~~~~~~
true.

All delete operations are applied directly to the object. Here delete rabbit.eats tries to remove
eats property from rabbit, but it doesn’t have it. So the operation won’t have any effect.


~~~~~~~~~~~~~~~~~~4.~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The last variant:

function Rabbit() {}
Rabbit.prototype = {
  eats: true
};

let rabbit = new Rabbit();

delete Rabbit.prototype.eats;

alert( rabbit.eats ); // ?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~solution~~~~~~~~~~~~~~~~~~~~~~~~~~~
undefined.

The property eats is deleted from the prototype, it doesn’t exist any more.


================Question 2=========================
Create an object with the same constructor
importance: 5
Imagine, we have an arbitrary object obj, created by a constructor function – we don’t know which one,
but we’d like to create a new object using it.

Can we do it like that?

let obj2 = new obj.constructor();
Give an example of a constructor function for obj which lets such code work right. And an example that
makes it work wrong.

##################solution#############################
We can use such approach if we are sure that "constructor" property has the correct value.

For instance, if we don’t touch the default "prototype", then this code works for sure:

function User(name) {
  this.name = name;
}

let user = new User('John');
let user2 = new user.constructor('Pete');

alert( user2.name ); // Pete (worked!)
It worked, because User.prototype.constructor == User.

…But if someone, so to speak, overwrites User.prototype and forgets to recreate constructor to reference
User, then it would fail.

For instance:

function User(name) {
  this.name = name;
}
User.prototype = {}; // (*)

let user = new User('John');
let user2 = new user.constructor('Pete');

alert( user2.name ); // undefined
Why user2.name is undefined?

Here’s how new user.constructor('Pete') works:

First, it looks for constructor in user. Nothing.
Then it follows the prototype chain. The prototype of user is User.prototype, and it also has nothing.
The value of User.prototype is a plain object {}, its prototype is Object.prototype. And there is Object.
prototype.constructor == Object. So it is used.
At the end, we have let user2 = new Object('Pete'). The built-in Object constructor ignores arguments,
it always creates an empty object, similar to let user2 = {}, that’s what we have in user2 after all.